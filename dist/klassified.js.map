{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/globalPropertyEventEmitter.js","src/klassified.js","src/object.js","src/propertiesEventEmitter.js","src/property.js","src/testCase.js"],"names":[],"mappings":"AAAA;;;;;;;ACAA;;;;;;AAEA;;;;;kBAKe,iBAAO,iBAAP,CAAyB,UAAS,IAAT,EAAe,EAAf,EAAmB;AAC1D,IAAG,UAAH,GAAgB,UAAS,IAAT,EAAe;AAC9B,KAAG,KAAH,CAAS,IAAT;AACA,KAAG,eAAH,GAAqB,EAArB;AACA,KAAG,eAAH,GAAqB,EAArB;AACA,EAJD;;AAMA,MAAK,QAAL,GAAgB,UAAS,QAAT,EAAmB;AAClC,KAAG,eAAH,CAAmB,IAAnB,CAAwB,QAAxB;AACA,EAFD;;AAIA,MAAK,QAAL,GAAgB,UAAS,QAAT,EAAmB;AAClC,KAAG,eAAH,CAAmB,IAAnB,CAAwB,QAAxB;AACA,EAFD;;AAIA,MAAK,UAAL,GAAkB,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AAC9C,KAAG,eAAH,CAAmB,OAAnB,CAA2B,UAAS,QAAT,EAAmB;AAC7C,YAAS,QAAT,EAAmB,QAAnB;AACA,GAFD;AAGA,EAJD;;AAMA,MAAK,UAAL,GAAkB,UAAS,QAAT,EAAmB,QAAnB,EAA6B,KAA7B,EAAoC;AACrD,KAAG,eAAH,CAAmB,OAAnB,CAA2B,UAAS,QAAT,EAAmB;AAC7C,YAAS,QAAT,EAAmB,QAAnB,EAA6B,KAA7B;AACA,GAFD;AAGA,EAJD;AAKA,CA1Bc,C;;;;;;;;;;ACPf;;;;AACA;;;;AACA;;;;AACA;;;;QAGC,M;QACA,Q;QACA,oB;kBAGc;AACd,yBADc;AAEd,6BAFc;AAGd;AAHc,C;;;;;;;;ACXf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,SAAS,MAAT,CAAgB,IAAhB,EAAsB,EAAtB,EAA0B;AACzB,QAAO,QAAQ,EAAf;AACA,MAAK,MAAM,EAAX;;AAEA,KAAI,OAAO,EAAX;;AAEA,MAAK,QAAL,GAAgB,YAAW;AAC1B,SAAO,MAAP;AACA,EAFD;;AAIA;;;;AAIA,IAAG,aAAH,GAAmB,YAAW,CAAE,CAAhC;;AAEA;;;AAGA,IAAG,UAAH,GAAgB,YAAW,CAAE,CAA7B;;AAEA;;;;AAIA,IAAG,cAAH,GAAoB,YAAW,CAAE,CAAjC;;AAEA;;;AAGA,IAAG,sBAAH,GAA4B,sBAA5B;;AAEA;;;AAGA,IAAG,GAAH,GAAS,UAAS,QAAT,EAAmB,MAAnB,EAA2B;AACnC,MAAI,CAAC,MAAL,EAAa;AACZ,YAAS,kBAAW;AACnB,WAAO,GAAG,QAAH,CAAP;AACA,IAFD;AAGA;AACD,OAAK,QAAQ,YAAY,QAAZ,CAAb,IAAsC,MAAtC;AACA,EAPD;;AASA,IAAG,GAAH,GAAS,UAAS,QAAT,EAAmB,MAAnB,EAA2B;AACnC,MAAI,CAAC,MAAL,EAAa;AACZ,YAAS,gBAAS,KAAT,EAAgB;AACxB,OAAG,QAAH,IAAe,KAAf;AACA,WAAO,KAAP;AACA,IAHD;AAIA;AACD,OAAK,QAAQ,YAAY,QAAZ,CAAb,IAAsC,MAAtC;AACA,EARD;;AAUA;AACA;AACA,MAAK,QAAL,GAAgB,UAAhB,CAA2B,OAA3B,CAAmC,UAAS,SAAT,EAAoB;AACtD,YAAU,IAAV,EAAgB,EAAhB;AACA,EAFD;;AAIA,QAAO,IAAP;AACA;;AAED;;;AAGA,OAAO,UAAP,GAAoB,EAApB;;AAEA;;;AAGA,OAAO,aAAP,GAAuB,YAAW;AACjC,KAAI,gBAAgB,KAAK,UAAL,CAAgB,KAAhB,EAApB;AACA,MAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAS,KAAT,EAAgB;AACvC,QAAM,aAAN,GAAsB,OAAtB,CAA8B,UAAS,QAAT,EAAmB;AAChD,iBAAc,IAAd,CAAmB,QAAnB;AACA,GAFD;AAGA,EAJD;AAKA,QAAO,aAAP;AACA,CARD;;AAUA;;;AAGA,OAAO,qBAAP,GAA+B,YAAW;AACzC,KAAI,wBAAwB,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAS,KAAT,EAAgB;AAClE,SAAO,CAAC,MAAM,UAAd;AACA,EAF2B,CAA5B;;AAIA,MAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAS,KAAT,EAAgB;AACvC,QAAM,qBAAN,GAA8B,OAA9B,CAAsC,UAAS,QAAT,EAAmB;AACxD,yBAAsB,IAAtB,CAA2B,QAA3B;AACA,GAFD;AAGA,EAJD;;AAMA,QAAO,qBAAP;AACA,CAZD;;AAcA,OAAO,sBAAP,GAAgC,sBAAhC;;AAEA;;;AAGA,OAAO,UAAP,GAAoB,EAApB;;AAEA,IAAI,iBAAiB,WAArB;;AAEA;;;;;;AAMA,OAAO,QAAP,GAAkB,UAAS,OAAT,EAAkB;AACnC,KAAI,OAAO,IAAX;;AAEA,UAAS,KAAT,CAAe,IAAf,EAAqB,EAArB,EAAyB,QAAzB,EAAmC;AAClC,SAAO,QAAQ,EAAf;AACA,OAAK,MAAM,EAAX;;AAEA,MAAI,MAAM,UAAN,IAAoB,CAAC,QAAzB,EAAmC;AAClC,2BAAwB,IAAxB;AACA;;AAED,MAAI,MAAM,WAAN,IAAqB,CAAC,QAA1B,EAAoC;AACnC,4BAAyB,IAAzB;AACA;;AAED,MAAI,WAAW,KAAK,IAAL,EAAW,EAAX,EAAe,IAAf,CAAf;;AAEA,WAAS,QAAT,GAAoB,YAAW;AAC9B,UAAO,KAAP;AACA,GAFD;;AAIA,MAAI,gBAAgB,OAAO,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAApB;AACA,MAAI,UAAU,OAAO,MAAP,CAAc,EAAd,EAAkB,EAAlB,CAAd;;AAEA,QAAM,UAAN,CAAiB,OAAjB,CAAyB,UAAS,SAAT,EAAoB;AAC5C,aAAU,QAAV,EAAoB,EAApB;AACA,GAFD;;AAIA,UAAQ,QAAR,EAAkB,EAAlB;;AAEA,MAAI,eAAe,IAAf,CAAoB,OAApB,CAAJ,EAAkC;AACjC,gBAAa,EAAb,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,IAAjC;AACA,gBAAa,QAAb,EAAuB,aAAvB,EAAsC,KAAtC,EAA6C,MAA7C;AACA;;AAED,MAAI,CAAC,QAAL,EAAe;AACd,MAAG,aAAH,CAAiB,IAAjB;AACA,MAAG,UAAH,CAAc,IAAd;AACA,MAAG,cAAH,CAAkB,IAAlB;AACA;;AAED,SAAO,QAAP;AACA;;AAED,OAAM,UAAN,GAAmB,IAAnB;AACA,OAAM,UAAN,GAAmB,EAAnB;AACA,MAAK,UAAL,CAAgB,IAAhB,CAAqB,KAArB;;AAEA;AACA,OAAM,YAAN,GAAqB,KAAK,YAA1B;AACA,OAAM,YAAN,CAAmB,KAAnB;;AAEA,QAAO,KAAP;AACA,CArDD;;AAuDA,OAAO,iBAAP,GAA2B,UAAS,OAAT,EAAkB;AAC5C,KAAI,QAAQ,KAAK,QAAL,CAAc,OAAd,CAAZ;AACA,KAAI,WAAW,OAAf;AACA,OAAM,WAAN,GAAoB,IAApB;AACA,OAAM,QAAN,GAAiB,YAAW;AAC3B,SAAO,QAAP;AACA,EAFD;;AAIA,QAAO,KAAP;AACA,CATD;;AAWA,OAAO,gBAAP,GAA0B,UAAS,OAAT,EAAkB;AAC3C,KAAI,QAAQ,KAAK,QAAL,CAAc,OAAd,CAAZ;AACA,OAAM,UAAN,GAAmB,IAAnB;AACA,QAAO,KAAP;AACA,CAJD;;AAMA,OAAO,KAAP,GAAe,UAAS,OAAT,EAAkB;AAChC,KAAI,OAAO,IAAX;;AAEA,KAAI,SAAS,MAAb,EAAqB;AACpB,QAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACA;;AAED,KAAI,oBAAoB,KAAK,YAA7B;AACA,MAAK,YAAL,GAAoB,UAAS,KAAT,EAAgB;AACnC,oBAAkB,KAAlB;AACA,UAAQ,KAAR;AACA,EAHD;;AAKA,MAAK,YAAL,CAAkB,IAAlB;AACA,CAdD;;AAgBA,OAAO,YAAP,GAAsB,UAAS,IAAT,EAAe;AACpC;AACA,MAAK,KAAL,GAAa,OAAO,KAApB;AACA,MAAK,QAAL,GAAgB,OAAO,QAAvB;AACA,MAAK,iBAAL,GAAyB,OAAO,iBAAhC;AACA,MAAK,gBAAL,GAAwB,OAAO,gBAA/B;AACA,MAAK,aAAL,GAAqB,OAAO,aAA5B;AACA,MAAK,qBAAL,GAA6B,OAAO,qBAApC;AACA,MAAK,sBAAL,GAA8B,sBAA9B;AACA,MAAK,MAAL,GAAc,OAAO,MAArB;AACA,MAAK,UAAL,GAAkB,EAAlB;AACA,CAXD;;AAaA;;;;;AAKA,SAAS,YAAT,CAAsB,GAAtB,EAA2B,KAA3B,EAAkC,KAAlC,EAAyC,YAAzC,EAAuD;AACtD,sBAAqB,GAArB,EAA0B,KAA1B,EAAiC,KAAjC,EAAwC,YAAxC,EAAsD,OAAtD,CAA8D,UAAS,IAAT,EAAe;AAC5E,MAAI,CAAC,IAAI,IAAJ,EAAU,cAAf,EAA+B;AAC9B,OAAI,IAAJ,IAAa,UAAS,GAAT,EAAc,EAAd,EAAkB,OAAlB,EAA2B;AACvC,WAAO,YAAW;;AAEjB,SAAI,MAAM,IAAI,KAAd;AACA,SAAI,KAAJ,GAAY,OAAZ;AACA,SAAI,cAAc,GAAG,KAAH,CAAS,GAAT,EAAc,SAAd,CAAlB;AACA,SAAI,KAAJ,GAAY,GAAZ;;AAEA;AACA;AACA,SAAI,IAAI,KAAJ,KAAc,SAAlB,EAA6B;AAC5B,aAAO,IAAI,KAAX;AACA;;AAED,YAAO,WAAP;AACA,KAdD;AAeA,IAhBW,CAgBT,GAhBS,EAgBJ,IAAI,IAAJ,CAhBI,EAgBO,MAAM,IAAN,CAhBP,CAAZ;AAiBA,OAAI,IAAJ,EAAU,cAAV,GAA2B,IAA3B;AACA;AACD,EArBD;AAsBA;;AAED;;;;;;AAMA,SAAS,oBAAT,CAA8B,GAA9B,EAAmC,KAAnC,EAA0C,KAA1C,EAAiD,YAAjD,EAA+D;AAC9D,KAAI,CAAC,MAAM,oBAAX,EAAiC;AAChC,SAAO,cAAP,CAAsB,KAAtB,EAA6B,sBAA7B,EAAqD;AACpD,eAAY,KADwC;AAEpD,aAAU,IAF0C;AAGpD,UAAO;AAH6C,GAArD;AAKA;;AAED,KAAI,MAAM,oBAAN,CAA2B,YAA3B,CAAJ,EAA8C;AAC7C,SAAO,MAAM,oBAAN,CAA2B,YAA3B,CAAP;AACA;;AAED,OAAM,oBAAN,CAA2B,YAA3B,IAA2C,OAAO,IAAP,CAAY,GAAZ,EAAiB,MAAjB,CAAwB,UAAS,IAAT,EAAe;AACjF,SAAO,OAAO,MAAM,IAAN,CAAP,KAAwB,UAAxB,IACN,OAAO,IAAI,IAAJ,CAAP,KAAsB,UADhB,IAEN,eAAe,IAAf,CAAoB,IAAI,IAAJ,CAApB,CAFD;AAGA,EAJ0C,CAA3C;;AAMA,QAAO,MAAM,oBAAN,CAA2B,YAA3B,CAAP;AACA;;AAED;;;;;AAKA,OAAO,MAAP,GAAgB,UAAS,OAAT,EAAkB;AACjC,MAAK,UAAL,CAAgB,IAAhB,CAAqB,OAArB;AACA,CAFD;;AAIA,SAAS,uBAAT,CAAiC,KAAjC,EAAwC;AACvC,OAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACA;;AAED,SAAS,wBAAT,CAAkC,KAAlC,EAAyC;AACxC,OAAM,IAAI,KAAJ,CAAU,2EAAV,CAAN;AACA;;AAED;;;AAGA,IAAI,OAAO,OAAO,MAAd,KAAyB,UAA7B,EAAyC;AACxC,EAAC,YAAW;AACX,SAAO,MAAP,GAAgB,UAAS,MAAT,EAAiB;AAChC,OAAI,WAAW,SAAX,IAAwB,WAAW,IAAvC,EAA6C;AAC5C,UAAM,IAAI,SAAJ,CAAc,4CAAd,CAAN;AACA;;AAED,OAAI,SAAS,OAAO,MAAP,CAAb;AACA,QAAK,IAAI,QAAQ,CAAjB,EAAoB,QAAQ,UAAU,MAAtC,EAA8C,OAA9C,EAAuD;AACtD,QAAI,SAAS,UAAU,KAAV,CAAb;AACA,QAAI,WAAW,SAAX,IAAwB,WAAW,IAAvC,EAA6C;AAC5C,UAAK,IAAI,OAAT,IAAoB,MAApB,EAA4B;AAC3B,UAAI,OAAO,cAAP,CAAsB,OAAtB,CAAJ,EAAoC;AACnC,cAAO,OAAP,IAAkB,OAAO,OAAP,CAAlB;AACA;AACD;AACD;AACD;AACD,UAAO,MAAP;AACA,GAjBD;AAkBA,EAnBD;AAoBA;;AAED;;;;AAIA,SAAS,WAAT,CAAqB,MAArB,EAA6B;AAC5B,QAAO,OAAO,CAAP,EAAU,WAAV,KAA0B,OAAO,KAAP,CAAa,CAAb,CAAjC;AACA;;AAED;;;;AAIA,SAAS,sBAAT,GAAkC;AACjC,OAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACA;;kBAEc,M;;;;;;;;;ACzXf;;;;;;kBAEe,iBAAO,QAAP,CAAgB,UAAS,IAAT,EAAe,EAAf,EAAmB;AACjD,IAAG,UAAH,GAAgB,UAAS,IAAT,EAAe;AAC9B,KAAG,KAAH,CAAS,IAAT;AACA,KAAG,QAAH,GAAc,KAAK,QAAnB;;AAEA,KAAG,eAAH,GAAqB,EAArB;AACA,KAAG,eAAH,GAAqB,EAArB;AACA,EAND;;AAQA,MAAK,QAAL,GAAgB,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AAC5C,MAAI,CAAC,GAAG,eAAH,CAAmB,QAAnB,CAAL,EAAmC;AAClC,MAAG,eAAH,CAAmB,QAAnB,IAA+B,EAA/B;AACA;AACD,MAAI,GAAG,eAAH,CAAmB,QAAnB,EAA6B,OAA7B,CAAqC,QAArC,MAAmD,CAAC,CAAxD,EAA2D;AAC1D,MAAG,eAAH,CAAmB,QAAnB,EAA6B,IAA7B,CAAkC,QAAlC;AACA;AACD,EAPD;;AASA,MAAK,QAAL,GAAgB,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AAC5C,MAAI,CAAC,GAAG,eAAH,CAAmB,QAAnB,CAAL,EAAmC;AAClC,MAAG,eAAH,CAAmB,QAAnB,IAA+B,EAA/B;AACA;AACD,MAAI,GAAG,eAAH,CAAmB,QAAnB,EAA6B,OAA7B,CAAqC,QAArC,MAAmD,CAAC,CAAxD,EAA2D;AAC1D,MAAG,eAAH,CAAmB,QAAnB,EAA6B,IAA7B,CAAkC,QAAlC;AACA;AACD,EAPD;;AASA,MAAK,UAAL,GAAkB,UAAS,QAAT,EAAmB;AACpC,MAAI,CAAC,GAAG,eAAH,CAAmB,QAAnB,CAAL,EAAmC;AAClC;AACA;;AAED,KAAG,eAAH,CAAmB,QAAnB,EAA6B,OAA7B,CAAqC,UAAS,QAAT,EAAmB;AACvD,YAAS,GAAG,QAAZ,EAAsB,QAAtB;AACA,GAFD;AAGA,EARD;;AAUA,MAAK,UAAL,GAAkB,UAAS,QAAT,EAAmB,KAAnB,EAA0B;AAC3C,MAAI,CAAC,GAAG,eAAH,CAAmB,QAAnB,CAAL,EAAmC;AAClC;AACA;;AAED,KAAG,eAAH,CAAmB,QAAnB,EAA6B,OAA7B,CAAqC,UAAS,QAAT,EAAmB;AACvD,YAAS,GAAG,QAAZ,EAAsB,QAAtB,EAAgC,KAAhC;AACA,GAFD;AAGA,EARD;AASA,CA9Cc,C;;;;;ACFf;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;AAQA,iBAAO,MAAP,CAAc,UAAS,IAAT,EAAe,EAAf,EAAmB;AAChC,MAAK,gBAAL,GAAwB,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AACpD,MAAI,UAAU,GAAG,4BAAH,EAAd;AACA,UAAQ,QAAR,CAAiB,QAAjB,EAA2B,QAA3B;AACA,EAHD;;AAKA,MAAK,gBAAL,GAAwB,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AACpD,MAAI,UAAU,GAAG,4BAAH,EAAd;AACA,UAAQ,QAAR,CAAiB,QAAjB,EAA2B,QAA3B;AACA,EAHD;;AAKA,IAAG,QAAH,GAAc,UAAS,QAAT,EAAmB,YAAnB,EAAiC;AAC9C,MAAI,QAAQ,YAAZ;AACA,SAAO,cAAP,CAAsB,EAAtB,EAA0B,QAA1B,EAAoC;AACnC,iBAAc,IADqB;AAEnC,eAAY,IAFuB;AAGnC,QAAK,eAAW;AACf,uBAAmB,QAAnB;AACA,WAAO,KAAP;AACA,IANkC;AAOnC,QAAK,aAAS,QAAT,EAAmB;AACvB,YAAQ,QAAR;AACA,uBAAmB,QAAnB,EAA6B,KAA7B;AACA;AAVkC,GAApC;AAYA,EAdD;;AAgBA,IAAG,4BAAH,GAAkC,YAAW;AAC5C,MAAI,GAAG,sBAAP,EAA+B;AAC9B,UAAO,GAAG,sBAAV;AACA;;AAED,KAAG,sBAAH,GAA4B,sCAAuB;AAClD,aAAU;AADwC,GAAvB,CAA5B;;AAIA,SAAO,GAAG,sBAAV;AACA,EAVD;;AAYA,UAAS,kBAAT,CAA4B,QAA5B,EAAsC;AACrC,MAAI,UAAU,GAAG,4BAAH,EAAd;AACA,UAAQ,UAAR,CAAmB,QAAnB;AACA,uCAA2B,QAA3B,GAAsC,UAAtC,CAAiD,IAAjD,EAAuD,QAAvD;AACA;;AAED,UAAS,kBAAT,CAA4B,QAA5B,EAAsC,KAAtC,EAA6C;AAC5C,MAAI,UAAU,GAAG,4BAAH,EAAd;AACA,UAAQ,UAAR,CAAmB,QAAnB,EAA6B,KAA7B;AACA,uCAA2B,QAA3B,GAAsC,UAAtC,CAAiD,IAAjD,EAAuD,QAAvD,EAAiE,KAAjE;AACA;AACD,CAlDD;;;;;;;;;ACXA;;;;;;AAEA;;;;;;;AAOA,IAAI,WAAW,iBAAO,gBAAP,CAAwB,UAAS,IAAT,EAAe,EAAf,EAAmB;;AAEzD,IAAG,UAAH,GAAgB,UAAS,IAAT,EAAe;AAC9B,KAAG,KAAH,CAAS,IAAT;AACA,MAAI,QAAQ,GAAG,eAAH,EAAZ;AACA,QAAM,GAAG,IAAH,EAAN,EAAiB,YAAW;AAC3B,cAAW,GAAG,UAAd;AACA,aAAU,GAAG,SAAb;AACA,aAAU,GAAG,SAAb;AACA,YAAS,GAAG,QAAZ;AACA,SAAM,OAAN,CAAc,UAAS,IAAT,EAAe;AAC5B,OAAG,KAAK,IAAR,EAAc,KAAK,EAAnB;AACA,IAFD;AAGA,GARD;AASA,EAZD;;AAcA,IAAG,KAAH,GAAW,YAAW;AACrB,SAAO,KAAP;AACA,EAFD;;AAIA,IAAG,UAAH,GAAgB,YAAW,CAAE,CAA7B;AACA,IAAG,SAAH,GAAe,YAAW,CAAE,CAA5B;AACA,IAAG,SAAH,GAAe,YAAW,CAAE,CAA5B;AACA,IAAG,QAAH,GAAc,YAAW,CAAE,CAA3B;;AAEA,IAAG,IAAH,GAAU,YAAW;AACpB,SAAO,GAAG,sBAAH,EAAP;AACA,EAFD;;AAIA,IAAG,MAAH,GAAY,MAAZ;AACA,IAAG,KAAH,GAAW,KAAX;;AAEA,IAAG,eAAH,GAAqB,YAAW;AAC/B,MAAI,SAAS,EAAb;AACA,MAAI,YAAY,OAAhB;;AAEA,SAAO,IAAP,CAAY,EAAZ,EAAgB,OAAhB,CAAwB,UAAS,IAAT,EAAe;AACtC,OAAI,OAAO,GAAG,IAAH,CAAP,KAAoB,UAApB,IACH,UAAU,IAAV,CAAe,IAAf,CADD,EACuB;AACtB,WAAO,IAAP,CAAY;AACX,WAAM,GAAG,aAAH,CAAiB,IAAjB,CADK;AAEX,SAAI,GAAG,IAAH;AAFO,KAAZ;AAIA;AACD,GARD;;AAUA,SAAO,MAAP;AACA,EAfD;;AAiBA,IAAG,aAAH,GAAmB,UAAS,IAAT,EAAe;AACjC,SAAO,KAAK,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACA,MAAI,SAAS,iBAAb;AACA,SAAO,KAAK,OAAL,CAAa,MAAb,EAAqB,KAArB,CAAP;AACA,SAAO,KAAK,WAAL,EAAP;AACA,SAAO,IAAP;AACA,EAND;;AAQA,UAAS,KAAT,CAAe,IAAf,EAAqB,QAArB,EAA+B;AAC9B,MAAI,GAAG,KAAH,EAAJ,EAAgB;AACf,aAAU,IAAV,EAAgB,YAAW;AAAE;AAC5B;AACA,IAFD;AAGA,GAJD,MAIO;AACN,YAAS,IAAT,EAAe,YAAW;AACzB;AACA,IAFD;AAGA;AACD;AACD,CApEc,CAAf,C,CAVA;;;AAgFA,SAAS,KAAT,CAAe,UAAS,IAAT,EAAe;AAC7B,MAAK,UAAL,GAAkB,YAAW;AAC5B,SAAO,IAAP;AACA,EAFD;;AAIA;AACA;AACA,MAAK,QAAL,GAAiB,UAAS,aAAT,EAAwB;AACxC,SAAO,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AACjC,OAAI,QAAQ,cAAc,KAAd,CAAoB,IAApB,EAA0B,CAAC,OAAD,CAA1B,CAAZ;;AAEA,OAAI,WAAW,QAAQ,UAAvB,EAAmC;AAClC,WAAO,KAAP;AACA;;AAED,OAAI,WAAW,OAAf;AACA,SAAM,WAAN,GAAoB,IAApB;AACA,SAAM,QAAN,GAAiB,YAAW;AAC3B,WAAO,QAAP;AACA,IAFD;;AAIA,UAAO,KAAP;AACA,GAdD;AAeA,EAhBe,CAgBb,KAAK,QAhBQ,CAAhB;;AAkBA;AACA,MAAK,gBAAL,GAAyB,UAAS,qBAAT,EAAgC;AACxD,SAAO,UAAS,OAAT,EAAkB;AACxB,OAAI,QAAQ,KAAK,QAAL,CAAc,OAAd,EAAuB,EAAE,YAAY,IAAd,EAAvB,CAAZ;AACA,SAAM,UAAN,GAAmB,IAAnB;AACA,UAAO,KAAP;AACA,GAJD;AAMA,EAPuB,CAOrB,KAAK,gBAPgB,CAAxB;AAQA,CAlCD;;kBAoCe,Q","file":"klassified.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import object from \"./object\";\n\n/**\n * Central property events emitter.\n *\n * All properties will trigger events when accessed or changed.\n */\nexport default object.singletonSubclass(function(that, my) {\n\tmy.initialize = function(spec) {\n\t\tmy.super(spec);\n\t\tmy.accessListeners = [];\n\t\tmy.changeListeners = [];\n\t};\n\n\tthat.onAccess = function(listener) {\n\t\tmy.accessListeners.push(listener);\n\t};\n\n\tthat.onChange = function(listener) {\n\t\tmy.changeListeners.push(listener);\n\t};\n\n\tthat.emitAccess = function(instance, propName) {\n\t\tmy.accessListeners.forEach(function(listener) {\n\t\t\tlistener(instance, propName);\n\t\t});\n\t};\n\n\tthat.emitChange = function(instance, propName, value) {\n\t\tmy.changeListeners.forEach(function(listener) {\n\t\t\tlistener(instance, propName, value);\n\t\t});\n\t};\n});\n","import object from \"./object\";\nimport testCase from \"./testCase\";\nimport propertyEventEmitter from \"./globalPropertyEventEmitter\";\nimport \"./property\";\n\nexport {\n\tobject,\n\ttestCase,\n\tpropertyEventEmitter\n};\n\nexport default {\n\tobject,\n\ttestCase,\n\tpropertyEventEmitter\n};\n","/**\n * `object` is the base class of the object model.\n * It provides facilities to create subclasses and common methods.\n *\n * @example Basic usage\n *\n * Creating subclasses & using inheritance:\n *\n *    let animal = object.subclass(function(that, my) {\n *\n *        my.initialize = function(spec) {\n *            my.super();\n *            my.name = spec.name;\n *        };\n *\n *        that.getName = function() {\n *            return my.name;\n *        };\n *\n *        that.say = function(something) {\n *            my.subclassResponsibility();\n *        };\n *    });\n *\n *\n *    let dog = animal.subclass(function(that, my) {\n *\n *        that.getName = function() {\n *            return \"dog \" + that.super();\n *        };\n *\n *        that.say = function(something) {\n *            return \"Woof Woof, \" + something;\n *        };\n *    });\n *\n * Creating instances:\n *\n *    let milou = dog({name: milou});\n *    milou.say(\"hello Tintin\"); ;; => \"Woof Woof, hello Tintin\"\n *    milou.getName(); // => \"dog milou\"\n *\n * @param{{}} spec\n * @param{{}} my\n * @return {object}\n */\nfunction object(spec, my) {\n\tspec = spec || {};\n\tmy = my || {};\n\n\tlet that = {};\n\n\tthat.getClass = function() {\n\t\treturn object;\n\t};\n\n\t/**\n\t * preInitialize is called by the framework at the beginning\n\t * of object instantiation.\n\t */\n\tmy.preInitialize = function() {};\n\n\t/**\n\t * initialize is called by the framework upon object instantiation.\n\t */\n\tmy.initialize = function() {};\n\n\t/**\n\t * postInitialize is called by the framework at the end of\n\t * object instantiation.\n\t */\n\tmy.postInitialize = function() {};\n\n\t/**\n\t * Throws an error because the method should have been overridden.\n\t */\n\tmy.subclassResponsibility = subclassResponsibility;\n\n\t/**\n\t * Getter/Setter generation\n\t */\n\tmy.get = function(propName, getter) {\n\t\tif (!getter) {\n\t\t\tgetter = function() {\n\t\t\t\treturn my[propName];\n\t\t\t};\n\t\t}\n\t\tthat[\"get\" + capitalized(propName)] = getter;\n\t};\n\n\tmy.set = function(propName, setter) {\n\t\tif (!setter) {\n\t\t\tsetter = function(value) {\n\t\t\t\tmy[propName] = value;\n\t\t\t\treturn value;\n\t\t\t};\n\t\t}\n\t\tthat[\"set\" + capitalized(propName)] = setter;\n\t};\n\n\t// install extensions by hand for object, since we do not have the\n\t// extension installation of the subclasses\n\tthat.getClass().extensions.forEach(function(extension) {\n\t\textension(that, my);\n\t});\n\n\treturn that;\n}\n\n/**\n * Return an array of direct subclasses.\n */\nobject.subclasses = [];\n\n/**\n * Return an array of all subclasses.\n */\nobject.allSubclasses = function() {\n\tlet allSubclasses = this.subclasses.slice();\n\tthis.subclasses.forEach(function(klass) {\n\t\tklass.allSubclasses().forEach(function(subclass) {\n\t\t\tallSubclasses.push(subclass);\n\t\t});\n\t});\n\treturn allSubclasses;\n};\n\n/**\n * Return all concrete subclasses.\n */\nobject.allConcreteSubclasses = function() {\n\tlet allConcreteSubclasses = this.subclasses.filter(function(klass) {\n\t\treturn !klass.isAbstract;\n\t});\n\n\tthis.subclasses.forEach(function(klass) {\n\t\tklass.allConcreteSubclasses().forEach(function(subclass) {\n\t\t\tallConcreteSubclasses.push(subclass);\n\t\t});\n\t});\n\n\treturn allConcreteSubclasses;\n};\n\nobject.subclassResponsibility = subclassResponsibility;\n\n/**\n * Return an array of all extensions of the class, see `object.extend`.\n */\nobject.extensions = [];\n\nlet superCallRegex = /\\bsuper\\b/;\n\n/**\n * Return a new subclass, and register it to the array of `subclasses`.\n *\n * @param{function} builder Function used to build new instances of the\n * subclass.\n */\nobject.subclass = function(builder) {\n\tlet that = this;\n\n\tfunction klass(spec, my, notFinal) {\n\t\tspec = spec || {};\n\t\tmy = my || {};\n\n\t\tif (klass.isAbstract && !notFinal) {\n\t\t\tthrowAbstractClassError(that);\n\t\t}\n\n\t\tif (klass.isSingleton && !notFinal) {\n\t\t\tthrowSingletonClassError(that);\n\t\t}\n\n\t\tlet instance = that(spec, my, true);\n\n\t\tinstance.getClass = function() {\n\t\t\treturn klass;\n\t\t};\n\n\t\tlet superInstance = Object.assign({}, instance);\n\t\tlet superMy = Object.assign({}, my);\n\n\t\tklass.extensions.forEach(function(extension) {\n\t\t\textension(instance, my);\n\t\t});\n\n\t\tbuilder(instance, my);\n\n\t\tif (superCallRegex.test(builder)) {\n\t\t\tinstallSuper(my, superMy, klass, \"my\");\n\t\t\tinstallSuper(instance, superInstance, klass, \"that\");\n\t\t}\n\n\t\tif (!notFinal) {\n\t\t\tmy.preInitialize(spec);\n\t\t\tmy.initialize(spec);\n\t\t\tmy.postInitialize(spec);\n\t\t}\n\n\t\treturn instance;\n\t}\n\n\tklass.superclass = that;\n\tklass.subclasses = [];\n\tthat.subclasses.push(klass);\n\n\t// static inheritance\n\tklass.classBuilder = that.classBuilder;\n\tklass.classBuilder(klass);\n\n\treturn klass;\n};\n\nobject.singletonSubclass = function(builder) {\n\tlet klass = this.subclass(builder);\n\tlet instance = klass();\n\tklass.isSingleton = true;\n\tklass.instance = function() {\n\t\treturn instance;\n\t};\n\n\treturn klass;\n};\n\nobject.abstractSubclass = function(builder) {\n\tlet klass = this.subclass(builder);\n\tklass.isAbstract = true;\n\treturn klass;\n};\n\nobject.class = function(builder) {\n\tlet that = this;\n\n\tif (that === object) {\n\t\tthrow new Error(\"object class should not be extended.\");\n\t}\n\n\tlet superClassBuilder = that.classBuilder;\n\tthat.classBuilder = function(klass) {\n\t\tsuperClassBuilder(klass);\n\t\tbuilder(klass);\n\t};\n\n\tthat.classBuilder(that);\n};\n\nobject.classBuilder = function(that) {\n\t// TODO: use Object.assign?\n\tthat.class = object.class;\n\tthat.subclass = object.subclass;\n\tthat.singletonSubclass = object.singletonSubclass;\n\tthat.abstractSubclass = object.abstractSubclass;\n\tthat.allSubclasses = object.allSubclasses;\n\tthat.allConcreteSubclasses = object.allConcreteSubclasses;\n\tthat.subclassResponsibility = subclassResponsibility;\n\tthat.extend = object.extend;\n\tthat.extensions = [];\n};\n\n/**\n * Mutate public functions of `obj` that make use of `super()` by binding\n * `super` from within each public function of `obj` to the function in\n * `proto`.\n */\nfunction installSuper(obj, proto, klass, receiverName) {\n\tmethodsWithSuperCall(obj, proto, klass, receiverName).forEach(function(name) {\n\t\tif (!obj[name].superInstalled) {\n\t\t\tobj[name] = (function(obj, fn, superFn) {\n\t\t\t\treturn function() {\n\n\t\t\t\t\tlet tmp = obj.super;\n\t\t\t\t\tobj.super = superFn;\n\t\t\t\t\tlet returnValue = fn.apply(obj, arguments);\n\t\t\t\t\tobj.super = tmp;\n\n\t\t\t\t\t// We reached the top of the stack regarding super\n\t\t\t\t\t// calls, so cleanup the namespace.\n\t\t\t\t\tif (obj.super === undefined) {\n\t\t\t\t\t\tdelete obj.super;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn returnValue;\n\t\t\t\t};\n\t\t\t})(obj, obj[name], proto[name]);\n\t\t\tobj[name].superInstalled = true;\n\t\t}\n\t});\n}\n\n/**\n * Return the list of methods in `obj` that perform a supercall to `proto`.\n * The list is cached in `klass`.\n *\n * `receiverName` is either \"that\" or \"my\".\n */\nfunction methodsWithSuperCall(obj, proto, klass, receiverName) {\n\tif (!klass.methodsWithSuperCall) {\n\t\tObject.defineProperty(klass, \"methodsWithSuperCall\", {\n\t\t\tenumerable: false,\n\t\t\twritable: true,\n\t\t\tvalue: {}\n\t\t});\n\t}\n\n\tif (klass.methodsWithSuperCall[receiverName]) {\n\t\treturn klass.methodsWithSuperCall[receiverName];\n\t}\n\n\tklass.methodsWithSuperCall[receiverName] = Object.keys(obj).filter(function(name) {\n\t\treturn typeof(proto[name]) === \"function\" &&\n\t\t\ttypeof(obj[name]) === \"function\" &&\n\t\t\tsuperCallRegex.test(obj[name]);\n\t});\n\n\treturn klass.methodsWithSuperCall[receiverName];\n}\n\n/**\n * Extend the class with new methods/properties.\n * @param{function} builder takes the same arguments as\n * `object.subclass`: `that`, `spec` and `my`.\n */\nobject.extend = function(builder) {\n\tthis.extensions.push(builder);\n};\n\nfunction throwAbstractClassError(klass) {\n\tthrow new Error(\"Cannot instantiate an abstract class\");\n}\n\nfunction throwSingletonClassError(klass) {\n\tthrow new Error(\"Cannot create new instances of a singleton class, use `instance` instead.\");\n}\n\n/**\n * Polyfill for Object.assign\n */\nif (typeof Object.assign !== \"function\") {\n\t(function() {\n\t\tObject.assign = function(target) {\n\t\t\tif (target === undefined || target === null) {\n\t\t\t\tthrow new TypeError(\"Cannot convert undefined or null to object\");\n\t\t\t}\n\n\t\t\tlet output = Object(target);\n\t\t\tfor (let index = 1; index < arguments.length; index++) {\n\t\t\t\tlet source = arguments[index];\n\t\t\t\tif (source !== undefined && source !== null) {\n\t\t\t\t\tfor (let nextKey in source) {\n\t\t\t\t\t\tif (source.hasOwnProperty(nextKey)) {\n\t\t\t\t\t\t\toutput[nextKey] = source[nextKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t};\n\t})();\n}\n\n/**\n * Helpers\n */\n\nfunction capitalized(string) {\n\treturn string[0].toUpperCase() + string.slice(1);\n}\n\n/**\n * Throw an error when a method should have been overridden in a concrete\n * subclass.\n */\nfunction subclassResponsibility() {\n\tthrow new Error(\"Subclass responsibility\");\n}\n\nexport default object;\n","import object from \"./object\";\n\nexport default object.subclass(function(that, my) {\n\tmy.initialize = function(spec) {\n\t\tmy.super(spec);\n\t\tmy.instance = spec.instance;\n\n\t\tmy.accessListeners = {};\n\t\tmy.changeListeners = {};\n\t};\n\n\tthat.onAccess = function(propName, listener) {\n\t\tif (!my.accessListeners[propName]) {\n\t\t\tmy.accessListeners[propName] = [];\n\t\t}\n\t\tif (my.accessListeners[propName].indexOf(listener) === -1) {\n\t\t\tmy.accessListeners[propName].push(listener);\n\t\t}\n\t};\n\n\tthat.onChange = function(propName, listener) {\n\t\tif (!my.changeListeners[propName]) {\n\t\t\tmy.changeListeners[propName] = [];\n\t\t}\n\t\tif (my.changeListeners[propName].indexOf(listener) === -1) {\n\t\t\tmy.changeListeners[propName].push(listener);\n\t\t}\n\t};\n\n\tthat.emitAccess = function(propName) {\n\t\tif (!my.accessListeners[propName]) {\n\t\t\treturn;\n\t\t}\n\n\t\tmy.accessListeners[propName].forEach(function(listener) {\n\t\t\tlistener(my.instance, propName);\n\t\t});\n\t};\n\n\tthat.emitChange = function(propName, value) {\n\t\tif (!my.changeListeners[propName]) {\n\t\t\treturn;\n\t\t}\n\n\t\tmy.changeListeners[propName].forEach(function(listener) {\n\t\t\tlistener(my.instance, propName, value);\n\t\t});\n\t};\n});\n","import object from \"./object\";\nimport propertiesEventEmitter from \"./propertiesEventEmitter\";\nimport globalPropertyEventEmitter from \"./globalPropertyEventEmitter\";\n\n/**\n * A property represent an observable attribute of an object, with optional\n * getters and setters.\n *\n * @param{string} spec.owner - Instance on which the property is installed.\n * @param{string} spec.name - Name of the property, which value of the same\n * name is installed on `my` on the instance.\n */\nobject.extend(function(that, my) {\n\tthat.onPropertyAccess = function(propName, listener) {\n\t\tlet emitter = my.ensurePropertiesEventEmitter();\n\t\temitter.onAccess(propName, listener);\n\t};\n\n\tthat.onPropertyChange = function(propName, listener) {\n\t\tlet emitter = my.ensurePropertiesEventEmitter();\n\t\temitter.onChange(propName, listener);\n\t};\n\n\tmy.property = function(propName, initialValue) {\n\t\tlet value = initialValue;\n\t\tObject.defineProperty(my, propName, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\temitPropertyAccess(propName);\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\tset: function(newValue) {\n\t\t\t\tvalue = newValue;\n\t\t\t\temitPropertyChange(propName, value);\n\t\t\t}\n\t\t});\n\t};\n\n\tmy.ensurePropertiesEventEmitter = function() {\n\t\tif (my.propertiesEventEmitter) {\n\t\t\treturn my.propertiesEventEmitter;\n\t\t}\n\n\t\tmy.propertiesEventEmitter = propertiesEventEmitter({\n\t\t\tinstance: that\n\t\t});\n\n\t\treturn my.propertiesEventEmitter;\n\t};\n\n\tfunction emitPropertyAccess(propName) {\n\t\tlet emitter = my.ensurePropertiesEventEmitter();\n\t\temitter.emitAccess(propName);\n\t\tglobalPropertyEventEmitter.instance().emitAccess(that, propName);\n\t}\n\n\tfunction emitPropertyChange(propName, value) {\n\t\tlet emitter = my.ensurePropertiesEventEmitter();\n\t\temitter.emitChange(propName, value);\n\t\tglobalPropertyEventEmitter.instance().emitChange(that, propName, value);\n\t}\n});\n","/* eslint jasmine/no-global-setup: 0 */\nimport object from \"./object\";\n\n/**\n * `testCase` implements an abstract test class, using Jasmine behind the\n * scenes.\n *\n * All subclasses of testCase are singletons (so that one instance is\n * created when the class is loaded).\n */\nlet testCase = object.abstractSubclass(function(that, my) {\n\n\tmy.initialize = function(spec) {\n\t\tmy.super(spec);\n\t\tlet tests = my.registeredTests();\n\t\tsuite(my.name(), function() {\n\t\t\tbeforeEach(my.beforeEach);\n\t\t\tafterEach(my.afterEach);\n\t\t\tbeforeAll(my.beforeAll);\n\t\t\tafterAll(my.afterAll);\n\t\t\ttests.forEach(function(test) {\n\t\t\t\tit(test.name, test.fn);\n\t\t\t});\n\t\t});\n\t};\n\n\tmy.force = function() {\n\t\treturn false;\n\t};\n\n\tmy.beforeEach = function() {};\n\tmy.beforeAll = function() {};\n\tmy.afterEach = function() {};\n\tmy.afterAll = function() {};\n\n\tmy.name = function() {\n\t\treturn my.subclassResponsibility();\n\t};\n\n\tmy.expect = expect;\n\tmy.spyOn = spyOn;\n\n\tmy.registeredTests = function() {\n\t\tlet result = [];\n\t\tlet testRegex = /Test$/;\n\n\t\tObject.keys(my).forEach(function(name) {\n\t\t\tif (typeof my[name] === \"function\" &&\n\t\t\t\ttestRegex.test(name)) {\n\t\t\t\tresult.push({\n\t\t\t\t\tname: my.buildTestName(name),\n\t\t\t\t\tfn: my[name]\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t};\n\n\tmy.buildTestName = function(name) {\n\t\tname = name.slice(0, -4);\n\t\tlet regexp = /([A-Z][^A-Z]*)/g;\n\t\tname = name.replace(regexp, \" $1\");\n\t\tname = name.toLowerCase();\n\t\treturn name;\n\t};\n\n\tfunction suite(name, callback) {\n\t\tif (my.force()) {\n\t\t\tfdescribe(name, function() { // eslint-disable-line jasmine/no-focused-tests\n\t\t\t\tcallback();\n\t\t\t});\n\t\t} else {\n\t\t\tdescribe(name, function() {\n\t\t\t\tcallback();\n\t\t\t});\n\t\t}\n\t}\n});\n\ntestCase.class(function(that) {\n\tthat.isTestCase = function() {\n\t\treturn true;\n\t};\n\n\t// All test classes are singletons.\n\t// TODO: Refactor with a super call when we\"ll have super on class-side.\n\tthat.subclass = (function(superSubclass) {\n\t\treturn function(builder, options) {\n\t\t\tlet klass = superSubclass.apply(that, [builder]);\n\n\t\t\tif (options && options.isAbstract) {\n\t\t\t\treturn klass;\n\t\t\t}\n\n\t\t\tlet instance = klass();\n\t\t\tklass.isSingleton = true;\n\t\t\tklass.instance = function() {\n\t\t\t\treturn instance;\n\t\t\t};\n\n\t\t\treturn klass;\n\t\t};\n\t})(that.subclass);\n\n\t// We need this to ensure we don't have abstract & singleton classes\n\tthat.abstractSubclass = (function(superAbstractSubclass) {\n\t\treturn function(builder) {\n\t\t\tlet klass = this.subclass(builder, { isAbstract: true });\n\t\t\tklass.isAbstract = true;\n\t\t\treturn klass;\n\t\t};\n\n\t})(that.abstractSubclass);\n});\n\nexport default testCase;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}